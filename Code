// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Faucet is Ownable {
    IERC20 public token;
    uint256 public dripAmount = 100 * 10 ** 18; // Example 100 tokens
    uint256 public waitTime = 1 days; // 24 hours

    mapping(address => uint256) public lastClaimed;

    event TokensClaimed(address indexed user, uint256 amount);

    constructor(address _token) {
        token = IERC20(_token);
    }

    function claim() external {
        require(block.timestamp - lastClaimed[msg.sender] >= waitTime, "Wait before next claim");
        require(token.balanceOf(address(this)) >= dripAmount, "Faucet empty");

        lastClaimed[msg.sender] = block.timestamp;
        token.transfer(msg.sender, dripAmount);

        emit TokensClaimed(msg.sender, dripAmount);
    }

    function setDripAmount(uint256 _amount) external onlyOwner {
        dripAmount = _amount;
    }

    function setWaitTime(uint256 _seconds) external onlyOwner {
        waitTime = _seconds;
    }

    function withdrawTokens(uint256 _amount) external onlyOwner {
        token.transfer(msg.sender, _amount);
    }
}
